# LEARN JAVA: METHODS
---------------------

* Introduction
--------------
	In the last lesson, we learned that objects have state and behavior. We have seen how to give objects state through instance fields. Now, we’re going to learn how to create object 
	behavior using methods. Remember our example of a Savings Account.

	The state tells us what a savings account should know:

		. The balance of money available

	The behavior tells us what tasks a savings account should be able to perform:

		. Depositing - increasing the amount available
		. Withdrawing - decreasing the amount available
		. Checking the balance - displaying the amount available.

	Methods are repeatable, modular blocks of code used to accomplish specific tasks. We have the ability to define our own methods that will take input, do something with it, and 
	return the kind of output we want.

	Looking at the example above, recreating a savings account is no easy task. How can one program tackle such a large problem? This is where methods with their ability to accomplish 
	smaller, specific tasks come in handy. Through method decomposition, we can use methods to break down a large problem into smaller, more manageable problems.

	Methods are also reusable. Imagine we wrote a sandwich-making program that used 20 lines of code to make a single sandwich. Our program would become very long very quickly if we 
	were making multiple sandwiches. By creating a makeSandwich() method, we can make a sandwich anytime simply by calling it.

	In this lesson, we’ll learn how to create and call our very own methods inside of our programs.

	Keep Reading: AP Computer Science A Students
	--------------------------------------------
	If we were to share this sandwich-making program with another person, they wouldn’t have to understand how makeSandwich() worked. If we wrote our program well, all they would need 
	to know is that if they called makeSandwich(), they would receive a sandwich. This concept is known as procedural abstraction: knowing what a method does, but not how it 
	accomplishes it.

SavingsAccount.java
-------------------
public class SavingsAccount {
  
  int balance;
  
  public SavingsAccount(int initialBalance){
    balance = initialBalance;
  }
  
  public static void main(String[] args){
    SavingsAccount savings = new SavingsAccount(2000);
    
    //Check balance:
    System.out.println("Hello!");
    System.out.println("Your balance is "+savings.balance);
    
    //Withdrawing:
    int afterWithdraw = savings.balance - 300;
    savings.balance = afterWithdraw;
    System.out.println("You just withdrew "+300);
    
    //Check balance:
    System.out.println("Hello!");
    System.out.println("Your balance is "+savings.balance);
    
    //Deposit:
    int afterDeposit = savings.balance + 600;
    savings.balance = afterDeposit;
    System.out.println("You just deposited "+600);
    
    //Check balance:
    System.out.println("Hello!");
    System.out.println("Your balance is "+savings.balance);
    
    //Deposit:
    int afterDeposit2 = savings.balance + 600;
    savings.balance = afterDeposit2;
    System.out.println("You just deposited "+600);
    
    //Check balance:
    System.out.println("Hello!");
    System.out.println("Your balance is "+savings.balance);
    
  }       
}

==================================================================================================================================================================

* Defining Methods
------------------
	If we were to define a checkBalance() method for the Savings Account example we talked about earlier, it would look like the following:

		public void checkBalance(){
  			System.out.println("Hello!");
  			System.out.println("Your balance is " + balance);
		}

	The first line, public void checkBalance(), is the method declaration. It gives the program some information about the method:

	. public means that other classes can access this method. We will learn more about that later in the course.

	. The void keyword means that there is no specific output from the method. We will see methods that are not void later in this lesson, but for now, all of our methods will be void.

	. checkBalance() is the name of the method.

	. Every method has its own unique method signature which is comprised of the method’s name and its parameter type. In this example, the method signature is checkBalance().

	. The two print statements are inside the body of the method, which is defined by the curly braces: { and }.

	. Anything we can do in our main() method, we can do in other methods! All of the Java tools you know, like the math and comparison operators, can be used to make interesting and 
	useful methods.

	* Keep Reading: AP Computer Science A Students
	----------------------------------------------
	checkBalance() is considered a non-static method because its signature does not include the keyword static like the main() method does. We’ll learn more about non-static methods 
	later in this course.

Store.java
----------
public class Store {
  // instance fields
  String productType;
  
  // constructor method
  public Store(String product) {
    productType = product;
  }
  
  // advertise method
  public void advertise() {
    System.out.println("Come spend some money!");
    System.out.println("Selling " + productType + "!");
  }
  // main method
  public static void main(String[] args) {
    
  }
}

==================================================================================================================================================================


























